name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '*.tf'
      - 'examples/**'
      - 'README.md'
  pull_request:
    paths:
      - 'variables.tf'
      - 'outputs.tf'
      - 'README.md'
      - 'docs/**'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  update-terraform-docs:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Update Terraform docs
        uses: terraform-docs/gh-actions@6de6da0cefcc6b4b7a5cbea4d79d97060733093c # v1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: true
          git-commit-message: "docs: update terraform-docs"

  build-and-deploy-docs:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    runs-on: ubuntu-latest
    # Set explicit permissions for the build-and-deploy-docs job
    permissions:
      contents: write  # For git push operations
      pages: write     # For GitHub Pages configuration
      id-token: write  # For deployment authentication
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0  # Needed for git-revision-date-localized plugin
          # Set token for proper permissions for gh-pages branch operations
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install MkDocs dependencies
        run: |
          # Install requirements from file
          pip install -r docs/requirements.txt
          # Ensure core dependencies are installed, even if requirements.txt changes
          pip install mkdocs-material>=9.4.0 "mkdocs-material-extensions>=1.1" pymdown-extensions>=10.2 mike>=2.0.0
          # List installed packages for debugging
          pip list

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_version: latest

      - name: Generate API Documentation
        run: |
          # Install terraform-docs
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          
          # Create API docs directory if it doesn't exist
          mkdir -p docs/api
          
          # Generate comprehensive API documentation
          echo "# Inputs" > docs/api/inputs.md
          echo "" >> docs/api/inputs.md
          echo "This page documents all available input variables for the module." >> docs/api/inputs.md
          echo "" >> docs/api/inputs.md
          ./terraform-docs markdown table --output-template '{{ .Inputs }}' . >> docs/api/inputs.md
          
          echo "# Outputs" > docs/api/outputs.md  
          echo "" >> docs/api/outputs.md
          echo "This page documents all outputs provided by the module." >> docs/api/outputs.md
          echo "" >> docs/api/outputs.md
          ./terraform-docs markdown table --output-template '{{ .Outputs }}' . >> docs/api/outputs.md
          
          echo "# Resources" > docs/api/resources.md
          echo "" >> docs/api/resources.md
          echo "This page documents all resources created by the module." >> docs/api/resources.md
          echo "" >> docs/api/resources.md
          ./terraform-docs markdown table --output-template '{{ .Resources }}' . >> docs/api/resources.md
          
          # Generate example documentation
          mkdir -p docs/examples
          for example in examples/*/; do
            if [ -d "$example" ]; then
              example_name=$(basename "$example")
              echo "# ${example_name^} Example" > "docs/examples/${example_name}.md"
              echo "" >> "docs/examples/${example_name}.md"
              if [ -f "${example}/README.md" ]; then
                cat "${example}/README.md" >> "docs/examples/${example_name}.md"
              else
                echo "Example configuration for ${example_name}." >> "docs/examples/${example_name}.md"
                echo "" >> "docs/examples/${example_name}.md"
                echo '```hcl' >> "docs/examples/${example_name}.md"
                cat "${example}/main.tf" >> "docs/examples/${example_name}.md" 2>/dev/null || echo "# Example configuration" >> "docs/examples/${example_name}.md"
                echo '```' >> "docs/examples/${example_name}.md"
              fi
            fi
          done

      # We've moved the git config into the build and deploy step

      - name: Get version info
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            VERSION="latest"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0
        with:
          enablement: true

      - name: Build and deploy with versioning
        run: |
          # Check mkdocs config 
          echo "Validating mkdocs configuration..."
          mkdocs build --clean --strict || {
            echo "::warning::MkDocs build failed with strict mode, trying with more verbose output"
            mkdocs build --verbose
          }
          
          # Setup git for GitHub Pages with proper merge strategy
          echo "Fetching gh-pages branch..."
          git fetch origin gh-pages || echo "No gh-pages branch yet - will be created"
          
          # Make sure we don't have any local changes that would cause checkout issues
          echo "Checking for local changes that could interfere with branch switching..."
          git status -s
          
          # First add any generated files that might be part of the documentation process
          git add docs/ || true
          
          # Stash any changes to prevent checkout conflicts
          echo "Stashing local changes to prevent conflicts..."
          git stash -u || echo "No changes to stash or stash failed"
          
          # Use a completely different approach - configure Git to handle the branch separately
          echo "Setting up Git configuration for cleaner branch management..."
          
          # We'll tell mike to use our token for authentication
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Let mike create/update the branch without us having to check it out manually
          # This avoids conflicts between our working directory and gh-pages content
          
          # Clear any gh-pages worktree if it exists (could cause conflicts)
          rm -rf /tmp/gh-pages || true
          
          # Make sure our main branch is clean and up to date
          git checkout main -f
          git pull origin main
          
          if [[ "${{ steps.version.outputs.is_release }}" == "true" ]]; then
            # For releases, create a versioned deployment
            echo "Deploying versioned documentation for release ${{ steps.version.outputs.version }}..."
            # Clean up any previous mike state to avoid conflicts
            rm -rf .mike || true
            mike deploy --push --update-aliases ${{ steps.version.outputs.version }} latest --title "${{ steps.version.outputs.version }}"
            mike set-default --push latest
          else
            # For main branch, update latest
            echo "Deploying latest documentation from main branch..."
            # Clean up any previous mike state to avoid conflicts
            rm -rf .mike || true
            mike deploy --push --update-aliases latest --title "Latest (main)"
            mike set-default --push latest
          fi
        env:
          # Increase Python's error verbosity
          PYTHONVERBOSE: 1
          # GitHub token for git-committers plugin (MKDOCS_GIT_COMMITTERS_APIKEY is what the plugin looks for)
          MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GIT_COMMITTERS_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3
        with:
          path: site

  deploy:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: build-and-deploy-docs
    # Set required permissions for GitHub Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment source
    # Deploy to the GitHub Pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5