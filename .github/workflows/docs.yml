name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '*.tf'
      - 'examples/**'
      - 'README.md'
  pull_request:
    paths:
      - 'variables.tf'
      - 'outputs.tf'
      - 'README.md'
      - 'docs/**'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  update-terraform-docs:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Update Terraform docs
        uses: terraform-docs/gh-actions@v1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: true
          git-commit-message: "docs: update terraform-docs"

  build-and-deploy-docs:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git-revision-date-localized plugin

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install MkDocs dependencies
        run: |
          pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-git-committers-plugin-2 mkdocs-minify-plugin mike

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Generate API Documentation
        run: |
          # Install terraform-docs
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          
          # Create API docs directory if it doesn't exist
          mkdir -p docs/api
          
          # Generate comprehensive API documentation
          echo "# Inputs" > docs/api/inputs.md
          echo "" >> docs/api/inputs.md
          echo "This page documents all available input variables for the module." >> docs/api/inputs.md
          echo "" >> docs/api/inputs.md
          ./terraform-docs markdown table --output-template '{{ .Inputs }}' . >> docs/api/inputs.md
          
          echo "# Outputs" > docs/api/outputs.md  
          echo "" >> docs/api/outputs.md
          echo "This page documents all outputs provided by the module." >> docs/api/outputs.md
          echo "" >> docs/api/outputs.md
          ./terraform-docs markdown table --output-template '{{ .Outputs }}' . >> docs/api/outputs.md
          
          echo "# Resources" > docs/api/resources.md
          echo "" >> docs/api/resources.md
          echo "This page documents all resources created by the module." >> docs/api/resources.md
          echo "" >> docs/api/resources.md
          ./terraform-docs markdown table --output-template '{{ .Resources }}' . >> docs/api/resources.md
          
          # Generate example documentation
          mkdir -p docs/examples
          for example in examples/*/; do
            if [ -d "$example" ]; then
              example_name=$(basename "$example")
              echo "# ${example_name^} Example" > "docs/examples/${example_name}.md"
              echo "" >> "docs/examples/${example_name}.md"
              if [ -f "${example}/README.md" ]; then
                cat "${example}/README.md" >> "docs/examples/${example_name}.md"
              else
                echo "Example configuration for ${example_name}." >> "docs/examples/${example_name}.md"
                echo "" >> "docs/examples/${example_name}.md"
                echo '```hcl' >> "docs/examples/${example_name}.md"
                cat "${example}/main.tf" >> "docs/examples/${example_name}.md" 2>/dev/null || echo "# Example configuration" >> "docs/examples/${example_name}.md"
                echo '```' >> "docs/examples/${example_name}.md"
              fi
            fi
          done

      - name: Configure Git for versioning
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get version info
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            VERSION="latest"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build and deploy with versioning
        run: |
          # Setup git for GitHub Pages
          git fetch origin gh-pages:gh-pages 2>/dev/null || echo "No gh-pages branch yet"
          
          if [[ "${{ steps.version.outputs.is_release }}" == "true" ]]; then
            # For releases, create a versioned deployment
            mike deploy --push --update-aliases ${{ steps.version.outputs.version }} latest --title "${{ steps.version.outputs.version }}"
            mike set-default --push latest
          else
            # For main branch, update latest
            mike deploy --push --update-aliases latest --title "Latest (main)"
            mike set-default --push latest
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-and-deploy-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4