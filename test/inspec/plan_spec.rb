# Debug control: print working directory and all files
control 'debug-filesystem' do
  impact 0.0
  title 'Debug: print working directory and all files before plan tests'

  describe command('pwd') do
    its('stdout') { should_not be_empty }
    it 'prints the working directory' do
      puts "Working directory: #{subject.stdout.strip}"
    end
  end

  describe command('find . -type f -print') do
    it 'prints all files recursively' do
      puts "Files in instance directory:\n#{subject.stdout}"
    end
  end
end

control 'github-repository-plan' do
  impact 1.0
  title 'Verify GitHub repository resources in Terraform plan'

  # Load the plan JSON generated by kitchen-terraform
  plan_path = 'kitchen-terraform-plan.json'
  describe file(plan_path) do
    it { should exist }
  end

  plan = nil
  if File.exist?(plan_path)
    begin
      plan = json(plan_path)
    rescue => e
      describe "plan.json parse error" do
        it "should be valid JSON: #{e}" do
          fail "plan.json could not be parsed: #{e}"
        end
      end
    end
  else
    describe 'plan.json existence' do
      it 'should exist' do
        fail 'plan.json file is missing!'
      end
    end
  end

  if plan.nil?
    describe 'plan.json content' do
      it 'should not be nil' do
        fail 'plan.json is nil or could not be parsed.'
      end
    end
  else
    # Debug: print top-level keys
    describe 'plan.json debug' do
      it 'should have expected top-level keys' do
        puts "plan.json top-level keys: #{plan.keys}"
      end
    end

    # Collect all resources from root and child modules
    resources = []
    rm = plan['planned_values']['root_module']
    resources.concat(rm['resources'] || [])
    if rm.key?('child_modules')
      rm['child_modules'].each { |cm| resources.concat(cm['resources'] || []) }
    end
    describe 'GitHub repository resources count' do
      subject { resources.select { |r| r['type'] == 'github_repository' }.count }
      it { should cmp 1 }
    end

    describe 'Repository name attribute' do
      repo = resources.find { |r| r['type'] == 'github_repository' }
      subject { repo['values']['name'] }
      it { should_not be_empty }
    end

    # Additional coverage tests
    describe 'Repository owner and visibility' do
      repo = resources.find { |r| r['type'] == 'github_repository' }
      it 'has the correct owner in HTML URL' do
        expected_owner = plan['variables']['owners']['value'][0]
        expect(repo['values']['html_url']).to include "/#{expected_owner}/"
      end
      it 'has the correct visibility' do
        expected_vis = plan['variables']['visibility']['value']
        expect(repo['values']['visibility']).to eq expected_vis
      end
    end

    describe 'Branch protection resources' do
      bp = resources.select { |r| r['type'] == 'github_branch_protection' }
      it 'creates at least one branch protection rule' do
        expect(bp.count).to be >= 1
      end
    end

    describe 'Issue integration resources' do
      issue = resources.select { |r| r['type'] == 'github_repository_file' && r['values']['file'] && r['values']['file'].match(%r{ISSUE_TEMPLATE}) }
      it 'creates at least one issue template file' do
        expect(issue.count).to be >= 1
      end
    end

    describe 'Project board' do
      pb = resources.select { |r| r['type'] == 'github_project' }
      it 'does not create a project board by default' do
        expect(pb.count).to eq 0
      end
    end
  end
end
